###############################################################################
# #         			Package Setup Configuration							# #
###############################################################################
# # Package Information:
[metadata]
name = main_package
version = attr: main_package.__version__
description = {{description}}
long_description = file: README.md
long_description_content_type="text/markdown",
url=https://www.lyngon.com
keywords = Python
license_files = LICENSE
author = Anders Åström
author_email = anders@lyngon.com
classifiers = # https://pypi.org/classifiers/
		Programming Language :: Python :: 3 :: Only
        Programming Language :: Python :: 3.9
        License :: Other/Proprietary License
        Operating System :: POSIX :: Linux
        Development Status :: 3 - Alpha
		Natural Language :: English
		Framework :: FastAPI
# platform =
# provides =
# requires =
# obsoletes = 

# # Package Settings:
[options]
python_requires = >= 3.9
packages = find:
package_dir =
    =src

# # Project runtime dependency packages:
install_requires = 
	# # Containerization specific dependencies:
	# ConfigArgParse - (Optional) Argument parsing, with env. var. support.
	ConfigArgParse   	
	# FastAPI - API framework (like Flask, but better).
    fastapi				
	# uvicorn - ASGI server, for hosting the API.
	uvicorn						

# # Additional 'extras' packages, if any:
[options.extras_require]
# Packages for local development
dev = 
	# AWS Cloud Development Kit (CDK)
	aws-cdk-lib>=2.21.0
	# Extension for CDK, for simpler management of Python Lambdas
	aws-cdk.aws-lambda-python-alpha
	# Library stubs for datutil.
	types-python-dateutil
	# Library stubs for requests package.
	types-requests
	
aws =
	# # SwiftDispatch specific dependencies:
	# Boto3 - AWS client package.
	boto3

api = 
	# FastAPI - API framework (like Flask, but better).
    fastapi				
	# uvicorn - ASGI server, for hosting the API.
	uvicorn	

# # Scripts to install when installing the package:
[options.entry_points]
console_scripts =
	# Install a CLI command `api-export-excel-from-db`, that will execute the 
	# `run_local` function in the `main` module.
	main_package = main_package.main:run_local

# # Location of the package(s) in the directory structure:
[options.packages.find]
where = src
# exclude =

###############################################################################
# #         				Test Tooling Config								# #
###############################################################################

# # PyTest
[tool:pytest]
junit_suite_name = pytest_report.xml
testpaths = 
	tests
# addopts = 
#	-n auto
#	-vv


###############################################################################
# #							Dev Tooling Config								# #
###############################################################################
# # Purely Preference based.  
# # VS Code (and other IDEs) can be configured to apply these.

# # Black 
[tool.black]
# The only flexibility Black gives is the line-length :)
line-length = 88

# # Flake8
[flake8]
exclude = 
	.pytest,
	.tox,
	.venv,
	.vscode,
	.git/,
	__pycache__,
	docs/,
per-file-ignores = 
	*/__init__.py: F401,
max-complexity = 10
max-line-length = 88
# Needed for compatibility with Black
extend-ignore = E203, W503 

# # ISort
[isort]
multi_line_output = 3
include_trailing_comma = True
force_grid_wrap = 0
use_parentheses = True
ensure_newline_before_comments = True
line_length = 88

[tool.isort]
profile = "black"

# # MyPy
[mypy]
files = 
	src/,
	tests/,
	examples/,
	*.py,
allow_redefinition = False
ignore_errors = False
ignore_missing_imports = True
implicit_reexport = True
local_partial_types = True
strict_optional = True
strict_equality = True
warn_no_return = True
warn_unused_ignores = True
warn_redundant_casts = True
warn_unused_configs = True
warn_unreachable = True

